/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IAaveProtocolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveProtocolDataProvider__factory>;
    getContractFactory(
      name: "IL2Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2Pool__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "AaveATokenPayback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveATokenPayback__factory>;
    getContractFactory(
      name: "AaveBorrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveBorrow__factory>;
    getContractFactory(
      name: "AaveClosePosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveClosePosition__factory>;
    getContractFactory(
      name: "AaveOpenPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveOpenPosition__factory>;
    getContractFactory(
      name: "AavePayback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AavePayback__factory>;
    getContractFactory(
      name: "AaveSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveSupply__factory>;
    getContractFactory(
      name: "AaveWithdraw",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveWithdraw__factory>;
    getContractFactory(
      name: "AaveHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveHelper__factory>;
    getContractFactory(
      name: "AaveRepayMini",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveRepayMini__factory>;
    getContractFactory(
      name: "UniswapSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapSwap__factory>;
    getContractFactory(
      name: "AaveWithdrawMini",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveWithdrawMini__factory>;
    getContractFactory(
      name: "WithdrawMiniV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawMiniV2__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ISafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafe__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "CheckWalletType",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CheckWalletType__factory>;
    getContractFactory(
      name: "DefisaverLogger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefisaverLogger__factory>;
    getContractFactory(
      name: "TokenUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenUtils__factory>;
    getContractFactory(
      name: "DSAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuth__factory>;
    getContractFactory(
      name: "DSAuthEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthEvents__factory>;
    getContractFactory(
      name: "DSAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthority__factory>;
    getContractFactory(
      name: "DSAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuth__factory>;
    getContractFactory(
      name: "DSAuthEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthEvents__factory>;
    getContractFactory(
      name: "DSAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthority__factory>;
    getContractFactory(
      name: "IDSProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSProxyFactory__factory>;
    getContractFactory(
      name: "DSNote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSNote__factory>;
    getContractFactory(
      name: "DSNote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSNote__factory>;
    getContractFactory(
      name: "DSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSProxy__factory>;
    getContractFactory(
      name: "DSProxyCache",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSProxyCache__factory>;
    getContractFactory(
      name: "DSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSProxy__factory>;
    getContractFactory(
      name: "DSProxyCache",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSProxyCache__factory>;
    getContractFactory(
      name: "DSProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSProxyFactory__factory>;
    getContractFactory(
      name: "Deposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deposit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "CreateShort",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreateShort__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IExchangeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchangeRouter__factory>;
    getContractFactory(
      name: "IReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReader__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IExchangeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchangeRouter__factory>;
    getContractFactory(
      name: "MockExchangeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockExchangeRouter__factory>;
    getContractFactory(
      name: "IReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReader__factory>;
    getContractFactory(
      name: "MockReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockReader__factory>;
    getContractFactory(
      name: "MockUniswapSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapSwap__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "IDSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSProxy__factory>;
    getContractFactory(
      name: "ActionBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ActionBase__factory>;
    getContractFactory(
      name: "AdminAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminAuth__factory>;
    getContractFactory(
      name: "AdminData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminData__factory>;
    getContractFactory(
      name: "DFSRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DFSRegistry__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "TestStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestStub__factory>;

    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "ISwapRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IAaveProtocolDataProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveProtocolDataProvider>;
    getContractAt(
      name: "IL2Pool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2Pool>;
    getContractAt(
      name: "IPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolAddressesProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "AaveATokenPayback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveATokenPayback>;
    getContractAt(
      name: "AaveBorrow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveBorrow>;
    getContractAt(
      name: "AaveClosePosition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveClosePosition>;
    getContractAt(
      name: "AaveOpenPosition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveOpenPosition>;
    getContractAt(
      name: "AavePayback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AavePayback>;
    getContractAt(
      name: "AaveSupply",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveSupply>;
    getContractAt(
      name: "AaveWithdraw",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveWithdraw>;
    getContractAt(
      name: "AaveHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveHelper>;
    getContractAt(
      name: "AaveRepayMini",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveRepayMini>;
    getContractAt(
      name: "UniswapSwap",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapSwap>;
    getContractAt(
      name: "AaveWithdrawMini",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveWithdrawMini>;
    getContractAt(
      name: "WithdrawMiniV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawMiniV2>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ISafe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafe>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "CheckWalletType",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CheckWalletType>;
    getContractAt(
      name: "DefisaverLogger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DefisaverLogger>;
    getContractAt(
      name: "TokenUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenUtils>;
    getContractAt(
      name: "DSAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuth>;
    getContractAt(
      name: "DSAuthEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthEvents>;
    getContractAt(
      name: "DSAuthority",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthority>;
    getContractAt(
      name: "DSAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuth>;
    getContractAt(
      name: "DSAuthEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthEvents>;
    getContractAt(
      name: "DSAuthority",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthority>;
    getContractAt(
      name: "IDSProxyFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSProxyFactory>;
    getContractAt(
      name: "DSNote",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSNote>;
    getContractAt(
      name: "DSNote",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSNote>;
    getContractAt(
      name: "DSProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSProxy>;
    getContractAt(
      name: "DSProxyCache",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSProxyCache>;
    getContractAt(
      name: "DSProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSProxy>;
    getContractAt(
      name: "DSProxyCache",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSProxyCache>;
    getContractAt(
      name: "DSProxyFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSProxyFactory>;
    getContractAt(
      name: "Deposit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Deposit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "CreateShort",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CreateShort>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IExchangeRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchangeRouter>;
    getContractAt(
      name: "IReader",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReader>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IExchangeRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchangeRouter>;
    getContractAt(
      name: "MockExchangeRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockExchangeRouter>;
    getContractAt(
      name: "IReader",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReader>;
    getContractAt(
      name: "MockReader",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockReader>;
    getContractAt(
      name: "MockUniswapSwap",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUniswapSwap>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "IDSProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSProxy>;
    getContractAt(
      name: "ActionBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ActionBase>;
    getContractAt(
      name: "AdminAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminAuth>;
    getContractAt(
      name: "AdminData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminData>;
    getContractAt(
      name: "DFSRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DFSRegistry>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "TestStub",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestStub>;

    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: "IAaveProtocolDataProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAaveProtocolDataProvider>;
    deployContract(
      name: "IL2Pool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2Pool>;
    deployContract(
      name: "IPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPool>;
    deployContract(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolAddressesProvider>;
    deployContract(
      name: "AaveATokenPayback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveATokenPayback>;
    deployContract(
      name: "AaveBorrow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveBorrow>;
    deployContract(
      name: "AaveClosePosition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveClosePosition>;
    deployContract(
      name: "AaveOpenPosition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveOpenPosition>;
    deployContract(
      name: "AavePayback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AavePayback>;
    deployContract(
      name: "AaveSupply",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveSupply>;
    deployContract(
      name: "AaveWithdraw",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveWithdraw>;
    deployContract(
      name: "AaveHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveHelper>;
    deployContract(
      name: "AaveRepayMini",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveRepayMini>;
    deployContract(
      name: "UniswapSwap",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapSwap>;
    deployContract(
      name: "AaveWithdrawMini",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveWithdrawMini>;
    deployContract(
      name: "WithdrawMiniV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawMiniV2>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ISafe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISafe>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "CheckWalletType",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CheckWalletType>;
    deployContract(
      name: "DefisaverLogger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DefisaverLogger>;
    deployContract(
      name: "TokenUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenUtils>;
    deployContract(
      name: "DSAuth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuth>;
    deployContract(
      name: "DSAuthEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuthEvents>;
    deployContract(
      name: "DSAuthority",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuthority>;
    deployContract(
      name: "DSAuth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuth>;
    deployContract(
      name: "DSAuthEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuthEvents>;
    deployContract(
      name: "DSAuthority",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuthority>;
    deployContract(
      name: "IDSProxyFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSProxyFactory>;
    deployContract(
      name: "DSNote",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSNote>;
    deployContract(
      name: "DSNote",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSNote>;
    deployContract(
      name: "DSProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxy>;
    deployContract(
      name: "DSProxyCache",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxyCache>;
    deployContract(
      name: "DSProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxy>;
    deployContract(
      name: "DSProxyCache",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxyCache>;
    deployContract(
      name: "DSProxyFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxyFactory>;
    deployContract(
      name: "Deposit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deposit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "CreateShort",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreateShort>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IExchangeRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExchangeRouter>;
    deployContract(
      name: "IReader",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReader>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IExchangeRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExchangeRouter>;
    deployContract(
      name: "MockExchangeRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockExchangeRouter>;
    deployContract(
      name: "IReader",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReader>;
    deployContract(
      name: "MockReader",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockReader>;
    deployContract(
      name: "MockUniswapSwap",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUniswapSwap>;
    deployContract(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "IDSProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSProxy>;
    deployContract(
      name: "ActionBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ActionBase>;
    deployContract(
      name: "AdminAuth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminAuth>;
    deployContract(
      name: "AdminData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminData>;
    deployContract(
      name: "DFSRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DFSRegistry>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "TestStub",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestStub>;

    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "ISwapRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: "IAaveProtocolDataProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAaveProtocolDataProvider>;
    deployContract(
      name: "IL2Pool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2Pool>;
    deployContract(
      name: "IPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPool>;
    deployContract(
      name: "IPoolAddressesProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolAddressesProvider>;
    deployContract(
      name: "AaveATokenPayback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveATokenPayback>;
    deployContract(
      name: "AaveBorrow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveBorrow>;
    deployContract(
      name: "AaveClosePosition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveClosePosition>;
    deployContract(
      name: "AaveOpenPosition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveOpenPosition>;
    deployContract(
      name: "AavePayback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AavePayback>;
    deployContract(
      name: "AaveSupply",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveSupply>;
    deployContract(
      name: "AaveWithdraw",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveWithdraw>;
    deployContract(
      name: "AaveHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveHelper>;
    deployContract(
      name: "AaveRepayMini",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveRepayMini>;
    deployContract(
      name: "UniswapSwap",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapSwap>;
    deployContract(
      name: "AaveWithdrawMini",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AaveWithdrawMini>;
    deployContract(
      name: "WithdrawMiniV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawMiniV2>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ISafe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISafe>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "CheckWalletType",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CheckWalletType>;
    deployContract(
      name: "DefisaverLogger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DefisaverLogger>;
    deployContract(
      name: "TokenUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenUtils>;
    deployContract(
      name: "DSAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuth>;
    deployContract(
      name: "DSAuthEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuthEvents>;
    deployContract(
      name: "DSAuthority",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuthority>;
    deployContract(
      name: "DSAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuth>;
    deployContract(
      name: "DSAuthEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuthEvents>;
    deployContract(
      name: "DSAuthority",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSAuthority>;
    deployContract(
      name: "IDSProxyFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSProxyFactory>;
    deployContract(
      name: "DSNote",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSNote>;
    deployContract(
      name: "DSNote",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSNote>;
    deployContract(
      name: "DSProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxy>;
    deployContract(
      name: "DSProxyCache",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxyCache>;
    deployContract(
      name: "DSProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxy>;
    deployContract(
      name: "DSProxyCache",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxyCache>;
    deployContract(
      name: "DSProxyFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSProxyFactory>;
    deployContract(
      name: "Deposit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deposit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "CreateShort",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreateShort>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IExchangeRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExchangeRouter>;
    deployContract(
      name: "IReader",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReader>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IExchangeRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExchangeRouter>;
    deployContract(
      name: "MockExchangeRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockExchangeRouter>;
    deployContract(
      name: "IReader",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReader>;
    deployContract(
      name: "MockReader",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockReader>;
    deployContract(
      name: "MockUniswapSwap",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUniswapSwap>;
    deployContract(
      name: "AggregatorV3Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "IDSProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSProxy>;
    deployContract(
      name: "ActionBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ActionBase>;
    deployContract(
      name: "AdminAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminAuth>;
    deployContract(
      name: "AdminData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminData>;
    deployContract(
      name: "DFSRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DFSRegistry>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "TestStub",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestStub>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
