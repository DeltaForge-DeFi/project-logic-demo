/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MockUniswapSwap,
  MockUniswapSwapInterface,
} from "../../../../../contracts/GMX/GMXShort/Mock/MockUniswapSwap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "Swapped",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_callData",
        type: "bytes",
      },
    ],
    name: "executeActionDirect",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506108b4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063389f87ff1461003b578063e30443bc14610057575b600080fd5b610055600480360381019061005091906103da565b610073565b005b610071600480360381019061006c91906104b7565b6101fd565b005b600081806020019051810190610089919061068f565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333084608001516040518463ffffffff1660e01b81526004016100d0939291906106db565b6020604051808303816000875af11580156100ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101139190610712565b50600064e8d4a510006107d0836080015161012e919061076e565b61013891906107df565b9050816020015173ffffffffffffffffffffffffffffffffffffffff166340c10f198360600151836040518363ffffffff1660e01b815260040161017d929190610810565b600060405180830381600087803b15801561019757600080fd5b505af11580156101ab573d6000803e3d6000fd5b505050507fa078c4190abe07940190effc1846be0ccf03ad6007bc9e93f9697d0b460befbb826000015183602001518460800151846040516101f09493929190610839565b60405180910390a1505050565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30836040518363ffffffff1660e01b8152600401610238929190610810565b6020604051808303816000875af1158015610257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027b9190610712565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102e78261029e565b810181811067ffffffffffffffff82111715610306576103056102af565b5b80604052505050565b6000610319610280565b905061032582826102de565b919050565b600067ffffffffffffffff821115610345576103446102af565b5b61034e8261029e565b9050602081019050919050565b82818337600083830152505050565b600061037d6103788461032a565b61030f565b90508281526020810184848401111561039957610398610299565b5b6103a484828561035b565b509392505050565b600082601f8301126103c1576103c0610294565b5b81356103d184826020860161036a565b91505092915050565b6000602082840312156103f0576103ef61028a565b5b600082013567ffffffffffffffff81111561040e5761040d61028f565b5b61041a848285016103ac565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044e82610423565b9050919050565b61045e81610443565b811461046957600080fd5b50565b60008135905061047b81610455565b92915050565b6000819050919050565b61049481610481565b811461049f57600080fd5b50565b6000813590506104b18161048b565b92915050565b600080604083850312156104ce576104cd61028a565b5b60006104dc8582860161046c565b92505060206104ed858286016104a2565b9150509250929050565b600080fd5b60008151905061050b81610455565b92915050565b600062ffffff82169050919050565b61052981610511565b811461053457600080fd5b50565b60008151905061054681610520565b92915050565b60008151905061055b8161048b565b92915050565b61056a81610423565b811461057557600080fd5b50565b60008151905061058781610561565b92915050565b60008115159050919050565b6105a28161058d565b81146105ad57600080fd5b50565b6000815190506105bf81610599565b92915050565b600061010082840312156105dc576105db6104f7565b5b6105e761010061030f565b905060006105f7848285016104fc565b600083015250602061060b848285016104fc565b602083015250604061061f84828501610537565b6040830152506060610633848285016104fc565b60608301525060806106478482850161054c565b60808301525060a061065b8482850161054c565b60a08301525060c061066f84828501610578565b60c08301525060e0610683848285016105b0565b60e08301525092915050565b600061010082840312156106a6576106a561028a565b5b60006106b4848285016105c5565b91505092915050565b6106c681610443565b82525050565b6106d581610481565b82525050565b60006060820190506106f060008301866106bd565b6106fd60208301856106bd565b61070a60408301846106cc565b949350505050565b6000602082840312156107285761072761028a565b5b6000610736848285016105b0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061077982610481565b915061078483610481565b925082820261079281610481565b915082820484148315176107a9576107a861073f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006107ea82610481565b91506107f583610481565b925082610805576108046107b0565b5b828204905092915050565b600060408201905061082560008301856106bd565b61083260208301846106cc565b9392505050565b600060808201905061084e60008301876106bd565b61085b60208301866106bd565b61086860408301856106cc565b61087560608301846106cc565b9594505050505056fea26469706673582212205eeeb7bd1070fc8540f2f9fdd6a769c5165753367e49a67159ff78a6c271820264736f6c63430008180033";

type MockUniswapSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapSwap__factory extends ContractFactory {
  constructor(...args: MockUniswapSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockUniswapSwap & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockUniswapSwap__factory {
    return super.connect(runner) as MockUniswapSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapSwapInterface {
    return new Interface(_abi) as MockUniswapSwapInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockUniswapSwap {
    return new Contract(address, _abi, runner) as unknown as MockUniswapSwap;
  }
}
