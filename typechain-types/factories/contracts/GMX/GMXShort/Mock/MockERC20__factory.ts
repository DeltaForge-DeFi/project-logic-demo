/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../../../contracts/GMX/GMXShort/Mock/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "contractTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405281019062000037919062000250565b826000908162000048919062000535565b5081600190816200005a919062000535565b5080600260006101000a81548160ff021916908360ff1602179055505050506200061c565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000e8826200009d565b810181811067ffffffffffffffff821117156200010a5762000109620000ae565b5b80604052505050565b60006200011f6200007f565b90506200012d8282620000dd565b919050565b600067ffffffffffffffff82111562000150576200014f620000ae565b5b6200015b826200009d565b9050602081019050919050565b60005b83811015620001885780820151818401526020810190506200016b565b60008484015250505050565b6000620001ab620001a58462000132565b62000113565b905082815260208101848484011115620001ca57620001c962000098565b5b620001d784828562000168565b509392505050565b600082601f830112620001f757620001f662000093565b5b81516200020984826020860162000194565b91505092915050565b600060ff82169050919050565b6200022a8162000212565b81146200023657600080fd5b50565b6000815190506200024a816200021f565b92915050565b6000806000606084860312156200026c576200026b62000089565b5b600084015167ffffffffffffffff8111156200028d576200028c6200008e565b5b6200029b86828701620001df565b935050602084015167ffffffffffffffff811115620002bf57620002be6200008e565b5b620002cd86828701620001df565b9250506040620002e08682870162000239565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b602082108103620003535762000352620002f5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200037e565b620003c986836200037e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000416620004106200040a84620003e1565b620003eb565b620003e1565b9050919050565b6000819050919050565b6200043283620003f5565b6200044a62000441826200041d565b8484546200038b565b825550505050565b600090565b6200046162000452565b6200046e81848462000427565b505050565b5b8181101562000496576200048a60008262000457565b60018101905062000474565b5050565b601f821115620004e557620004af8162000359565b620004ba846200036e565b81016020851015620004ca578190505b620004e2620004d9856200036e565b83018262000473565b50505b505050565b600082821c905092915050565b60006200050a60001984600802620004ea565b1980831691505092915050565b6000620005258383620004f7565b9150826002028217905092915050565b6200054082620002ea565b67ffffffffffffffff8111156200055c576200055b620000ae565b5b62000568825462000324565b620005758282856200049a565b600060209050601f831160018114620005ad576000841562000598578287015190505b620005a4858262000517565b86555062000614565b601f198416620005bd8662000359565b60005b82811015620005e757848901518255600182019150602085019450602081019050620005c0565b8683101562000607578489015162000603601f891682620004f7565b8355505b6001600288020188555050505b505050505050565b610f0d806200062c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806340c10f191161007157806340c10f191461016857806370a082311461018457806395d89b41146101b4578063a9059cbb146101d2578063dd62ed3e14610202578063f7ad906f14610232576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b661024e565b6040516100c39190610a4a565b60405180910390f35b6100e660048036038101906100e19190610b05565b6102dc565b6040516100f39190610b60565b60405180910390f35b610104610369565b6040516101119190610b8a565b60405180910390f35b610134600480360381019061012f9190610ba5565b61036f565b6040516101419190610b60565b60405180910390f35b6101526105fc565b60405161015f9190610c14565b60405180910390f35b610182600480360381019061017d9190610b05565b61060f565b005b61019e60048036038101906101999190610c2f565b610682565b6040516101ab9190610b8a565b60405180910390f35b6101bc61069a565b6040516101c99190610a4a565b60405180910390f35b6101ec60048036038101906101e79190610b05565b610728565b6040516101f99190610b60565b60405180910390f35b61021c60048036038101906102179190610c5c565b610862565b6040516102299190610b8a565b60405180910390f35b61024c60048036038101906102479190610ba5565b610887565b005b6000805461025b90610ccb565b80601f016020809104026020016040519081016040528092919081815260200182805461028790610ccb565b80156102d45780601f106102a9576101008083540402835291602001916102d4565b820191906000526020600020905b8154815290600101906020018083116102b757829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60035481565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ea90610d48565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990610db4565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105019190610e03565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105579190610e37565b9250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ea9190610e03565b92505081905550600190509392505050565b600260009054906101000a900460ff1681565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065e9190610e37565b9250508190555080600360008282546106779190610e37565b925050819055505050565b60046020528060005260406000206000915090505481565b600180546106a790610ccb565b80601f01602080910402602001604051908101604052809291908181526020018280546106d390610ccb565b80156107205780601f106106f557610100808354040283529160200191610720565b820191906000526020600020905b81548152906001019060200180831161070357829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156107ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a390610eb7565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107fb9190610e03565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108519190610e37565b925050819055506001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090090610eb7565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109589190610e03565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109ae9190610e37565b92505081905550505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109f45780820151818401526020810190506109d9565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a1c826109ba565b610a2681856109c5565b9350610a368185602086016109d6565b610a3f81610a00565b840191505092915050565b60006020820190508181036000830152610a648184610a11565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9c82610a71565b9050919050565b610aac81610a91565b8114610ab757600080fd5b50565b600081359050610ac981610aa3565b92915050565b6000819050919050565b610ae281610acf565b8114610aed57600080fd5b50565b600081359050610aff81610ad9565b92915050565b60008060408385031215610b1c57610b1b610a6c565b5b6000610b2a85828601610aba565b9250506020610b3b85828601610af0565b9150509250929050565b60008115159050919050565b610b5a81610b45565b82525050565b6000602082019050610b756000830184610b51565b92915050565b610b8481610acf565b82525050565b6000602082019050610b9f6000830184610b7b565b92915050565b600080600060608486031215610bbe57610bbd610a6c565b5b6000610bcc86828701610aba565b9350506020610bdd86828701610aba565b9250506040610bee86828701610af0565b9150509250925092565b600060ff82169050919050565b610c0e81610bf8565b82525050565b6000602082019050610c296000830184610c05565b92915050565b600060208284031215610c4557610c44610a6c565b5b6000610c5384828501610aba565b91505092915050565b60008060408385031215610c7357610c72610a6c565b5b6000610c8185828601610aba565b9250506020610c9285828601610aba565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ce357607f821691505b602082108103610cf657610cf5610c9c565b5b50919050565b7f496e73756666696369656e7420636f6e74726163742062616c616e6365000000600082015250565b6000610d32601d836109c5565b9150610d3d82610cfc565b602082019050919050565b60006020820190508181036000830152610d6181610d25565b9050919050565b7f416c6c6f77616e63652065786365656465640000000000000000000000000000600082015250565b6000610d9e6012836109c5565b9150610da982610d68565b602082019050919050565b60006020820190508181036000830152610dcd81610d91565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0e82610acf565b9150610e1983610acf565b9250828203905081811115610e3157610e30610dd4565b5b92915050565b6000610e4282610acf565b9150610e4d83610acf565b9250828201905080821115610e6557610e64610dd4565b5b92915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610ea16014836109c5565b9150610eac82610e6b565b602082019050919050565b60006020820190508181036000830152610ed081610e94565b905091905056fea264697066735822122075ad2ce7639e143abb7ff399733b6b6a0b55de325eee9a4892f88162c7571f6364736f6c63430008180033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      overrides || {}
    );
  }
  override deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_name, _symbol, _decimals, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
