/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  TestStub,
  TestStubInterface,
} from "../../../../contracts/stub/stub.sol/TestStub";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "paramsBytes",
        type: "bytes",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "paramsBytes",
        type: "bytes",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630968f264146100465780638da5cb5b1461006257806398b1e06a14610080575b600080fd5b610060600480360381019061005b91906102f8565b61009c565b005b61006a6101ba565b6040516100779190610386565b60405180910390f35b61009a600480360381019061009591906102f8565b6101de565b005b600082828101906100ad919061049a565b90506000816000015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016100ee9190610386565b602060405180830381865afa15801561010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012f91906104fd565b9050816000015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610170929190610539565b6020604051808303816000875af115801561018f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b3919061059a565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082828101906101ef919061062c565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333084602001516040518463ffffffff1660e01b815260040161023693929190610659565b6020604051808303816000875af1158015610255573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610279919061059a565b50505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126102b8576102b7610293565b5b8235905067ffffffffffffffff8111156102d5576102d4610298565b5b6020830191508360018202830111156102f1576102f061029d565b5b9250929050565b6000806020838503121561030f5761030e610289565b5b600083013567ffffffffffffffff81111561032d5761032c61028e565b5b610339858286016102a2565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061037082610345565b9050919050565b61038081610365565b82525050565b600060208201905061039b6000830184610377565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103ef826103a6565b810181811067ffffffffffffffff8211171561040e5761040d6103b7565b5b80604052505050565b600061042161027f565b905061042d82826103e6565b919050565b61043b81610365565b811461044657600080fd5b50565b60008135905061045881610432565b92915050565b600060208284031215610474576104736103a1565b5b61047e6020610417565b9050600061048e84828501610449565b60008301525092915050565b6000602082840312156104b0576104af610289565b5b60006104be8482850161045e565b91505092915050565b6000819050919050565b6104da816104c7565b81146104e557600080fd5b50565b6000815190506104f7816104d1565b92915050565b60006020828403121561051357610512610289565b5b6000610521848285016104e8565b91505092915050565b610533816104c7565b82525050565b600060408201905061054e6000830185610377565b61055b602083018461052a565b9392505050565b60008115159050919050565b61057781610562565b811461058257600080fd5b50565b6000815190506105948161056e565b92915050565b6000602082840312156105b0576105af610289565b5b60006105be84828501610585565b91505092915050565b6000813590506105d6816104d1565b92915050565b6000604082840312156105f2576105f16103a1565b5b6105fc6040610417565b9050600061060c84828501610449565b6000830152506020610620848285016105c7565b60208301525092915050565b60006040828403121561064257610641610289565b5b6000610650848285016105dc565b91505092915050565b600060608201905061066e6000830186610377565b61067b6020830185610377565b610688604083018461052a565b94935050505056fea2646970667358221220fdad1d97ca18cad860fed6defad2caee253c0a4be901842d5069f960639f735664736f6c63430008180033";

type TestStubConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestStubConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestStub__factory extends ContractFactory {
  constructor(...args: TestStubConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestStub & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestStub__factory {
    return super.connect(runner) as TestStub__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestStubInterface {
    return new Interface(_abi) as TestStubInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestStub {
    return new Contract(address, _abi, runner) as unknown as TestStub;
  }
}
