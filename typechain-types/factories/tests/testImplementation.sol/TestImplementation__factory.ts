/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestImplementation,
  TestImplementationInterface,
} from "../../../tests/testImplementation.sol/TestImplementation";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "ValueChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "getImplementationAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "initialVersion",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506108ea8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630cbcae701461005c5780630d8e6e2c1461007a578063209652551461009857806355241077146100b6578063f62d1888146100d2575b600080fd5b6100646100ee565b604051610071919061027e565b60405180910390f35b6100826100f6565b60405161008f9190610329565b60405180910390f35b6100a0610188565b6040516100ad9190610364565b60405180910390f35b6100d060048036038101906100cb91906103bf565b610191565b005b6100ec60048036038101906100e79190610521565b6101d2565b005b600030905090565b60606001805461010590610599565b80601f016020809104026020016040519081016040528092919081815260200182805461013190610599565b801561017e5780601f106101535761010080835404028352916020019161017e565b820191906000526020600020905b81548152906001019060200180831161016157829003601f168201915b5050505050905090565b60008054905090565b806000819055507f93fe6d397c74fdf1402a8b72e47b68512f0510d7b98a4bc4cbdf6ac7108b3c59816040516101c79190610364565b60405180910390a150565b6000600180546101e190610599565b905014610223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021a90610616565b60405180910390fd5b806001908161023291906107e2565b506000808190555050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102688261023d565b9050919050565b6102788161025d565b82525050565b6000602082019050610293600083018461026f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102d35780820151818401526020810190506102b8565b60008484015250505050565b6000601f19601f8301169050919050565b60006102fb82610299565b61030581856102a4565b93506103158185602086016102b5565b61031e816102df565b840191505092915050565b6000602082019050818103600083015261034381846102f0565b905092915050565b6000819050919050565b61035e8161034b565b82525050565b60006020820190506103796000830184610355565b92915050565b6000604051905090565b600080fd5b600080fd5b61039c8161034b565b81146103a757600080fd5b50565b6000813590506103b981610393565b92915050565b6000602082840312156103d5576103d4610389565b5b60006103e3848285016103aa565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61042e826102df565b810181811067ffffffffffffffff8211171561044d5761044c6103f6565b5b80604052505050565b600061046061037f565b905061046c8282610425565b919050565b600067ffffffffffffffff82111561048c5761048b6103f6565b5b610495826102df565b9050602081019050919050565b82818337600083830152505050565b60006104c46104bf84610471565b610456565b9050828152602081018484840111156104e0576104df6103f1565b5b6104eb8482856104a2565b509392505050565b600082601f830112610508576105076103ec565b5b81356105188482602086016104b1565b91505092915050565b60006020828403121561053757610536610389565b5b600082013567ffffffffffffffff8111156105555761055461038e565b5b610561848285016104f3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105b157607f821691505b6020821081036105c4576105c361056a565b5b50919050565b7f416c726561647920696e697469616c697a656400000000000000000000000000600082015250565b60006106006013836102a4565b915061060b826105ca565b602082019050919050565b6000602082019050818103600083015261062f816105f3565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261065b565b6106a2868361065b565b95508019841693508086168417925050509392505050565b6000819050919050565b60006106df6106da6106d58461034b565b6106ba565b61034b565b9050919050565b6000819050919050565b6106f9836106c4565b61070d610705826106e6565b848454610668565b825550505050565b600090565b610722610715565b61072d8184846106f0565b505050565b5b818110156107515761074660008261071a565b600181019050610733565b5050565b601f8211156107965761076781610636565b6107708461064b565b8101602085101561077f578190505b61079361078b8561064b565b830182610732565b50505b505050565b600082821c905092915050565b60006107b96000198460080261079b565b1980831691505092915050565b60006107d283836107a8565b9150826002028217905092915050565b6107eb82610299565b67ffffffffffffffff811115610804576108036103f6565b5b61080e8254610599565b610819828285610755565b600060209050601f83116001811461084c576000841561083a578287015190505b61084485826107c6565b8655506108ac565b601f19841661085a86610636565b60005b828110156108825784890151825560018201915060208501945060208101905061085d565b8683101561089f578489015161089b601f8916826107a8565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220440380f238fd64fac854e6e4ed376284a79f119a8a3a885f5e91ecbd16739f0c64736f6c634300081c0033";

type TestImplementationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestImplementationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestImplementation__factory extends ContractFactory {
  constructor(...args: TestImplementationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestImplementation & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestImplementation__factory {
    return super.connect(runner) as TestImplementation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestImplementationInterface {
    return new Interface(_abi) as TestImplementationInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestImplementation {
    return new Contract(address, _abi, runner) as unknown as TestImplementation;
  }
}
