/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type AddressesStruct = {
  account: AddressLike;
  market: AddressLike;
  collateralToken: AddressLike;
};

export type AddressesStructOutput = [
  account: string,
  market: string,
  collateralToken: string
] & { account: string; market: string; collateralToken: string };

export type NumbersStruct = {
  sizeInUsd: BigNumberish;
  sizeInTokens: BigNumberish;
  collateralAmount: BigNumberish;
  borrowingFactor: BigNumberish;
  fundingFeeAmountPerSize: BigNumberish;
  longTokenClaimableFundingAmountPerSize: BigNumberish;
  shortTokenClaimableFundingAmountPerSize: BigNumberish;
  increasedAtTime: BigNumberish;
  decreasedAtTime: BigNumberish;
};

export type NumbersStructOutput = [
  sizeInUsd: bigint,
  sizeInTokens: bigint,
  collateralAmount: bigint,
  borrowingFactor: bigint,
  fundingFeeAmountPerSize: bigint,
  longTokenClaimableFundingAmountPerSize: bigint,
  shortTokenClaimableFundingAmountPerSize: bigint,
  increasedAtTime: bigint,
  decreasedAtTime: bigint
] & {
  sizeInUsd: bigint;
  sizeInTokens: bigint;
  collateralAmount: bigint;
  borrowingFactor: bigint;
  fundingFeeAmountPerSize: bigint;
  longTokenClaimableFundingAmountPerSize: bigint;
  shortTokenClaimableFundingAmountPerSize: bigint;
  increasedAtTime: bigint;
  decreasedAtTime: bigint;
};

export type FlagsStruct = { isLong: boolean };

export type FlagsStructOutput = [isLong: boolean] & { isLong: boolean };

export type PositionPropsStruct = {
  addresses: AddressesStruct;
  numbers: NumbersStruct;
  flags: FlagsStruct;
};

export type PositionPropsStructOutput = [
  addresses: AddressesStructOutput,
  numbers: NumbersStructOutput,
  flags: FlagsStructOutput
] & {
  addresses: AddressesStructOutput;
  numbers: NumbersStructOutput;
  flags: FlagsStructOutput;
};

export interface CreateShortInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authority"
      | "createShort"
      | "owner"
      | "readPosition"
      | "userPositions"
      | "withdrawShort"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogPositionDetails"
      | "PositionClosed"
      | "PositionCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createShort",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readPosition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawShort",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShort",
    data: BytesLike
  ): Result;
}

export namespace LogPositionDetailsEvent {
  export type InputTuple = [
    user: AddressLike,
    sizeInUsd: BigNumberish,
    collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    sizeInUsd: bigint,
    collateralAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    sizeInUsd: bigint;
    collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionClosedEvent {
  export type InputTuple = [
    user: AddressLike,
    market: AddressLike,
    sizeDeltaUsd: BigNumberish,
    initialCollateralDeltaAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    market: string,
    sizeDeltaUsd: bigint,
    initialCollateralDeltaAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    market: string;
    sizeDeltaUsd: bigint;
    initialCollateralDeltaAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    market: AddressLike,
    sizeDeltaUsd: BigNumberish,
    initialCollateralDeltaAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    market: string,
    sizeDeltaUsd: bigint,
    initialCollateralDeltaAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    market: string;
    sizeDeltaUsd: bigint;
    initialCollateralDeltaAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreateShort extends BaseContract {
  connect(runner?: ContractRunner | null): CreateShort;
  waitForDeployment(): Promise<this>;

  interface: CreateShortInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authority: TypedContractMethod<[], [string], "view">;

  createShort: TypedContractMethod<[_callData: BytesLike], [void], "payable">;

  owner: TypedContractMethod<[], [string], "view">;

  readPosition: TypedContractMethod<
    [_callData: BytesLike],
    [PositionPropsStructOutput[]],
    "view"
  >;

  userPositions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        market: string;
        sizeDeltaUsd: bigint;
        initialCollateralDeltaAmount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  withdrawShort: TypedContractMethod<[_callData: BytesLike], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createShort"
  ): TypedContractMethod<[_callData: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readPosition"
  ): TypedContractMethod<
    [_callData: BytesLike],
    [PositionPropsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "userPositions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        market: string;
        sizeDeltaUsd: bigint;
        initialCollateralDeltaAmount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawShort"
  ): TypedContractMethod<[_callData: BytesLike], [void], "payable">;

  getEvent(
    key: "LogPositionDetails"
  ): TypedContractEvent<
    LogPositionDetailsEvent.InputTuple,
    LogPositionDetailsEvent.OutputTuple,
    LogPositionDetailsEvent.OutputObject
  >;
  getEvent(
    key: "PositionClosed"
  ): TypedContractEvent<
    PositionClosedEvent.InputTuple,
    PositionClosedEvent.OutputTuple,
    PositionClosedEvent.OutputObject
  >;
  getEvent(
    key: "PositionCreated"
  ): TypedContractEvent<
    PositionCreatedEvent.InputTuple,
    PositionCreatedEvent.OutputTuple,
    PositionCreatedEvent.OutputObject
  >;

  filters: {
    "LogPositionDetails(address,uint256,uint256)": TypedContractEvent<
      LogPositionDetailsEvent.InputTuple,
      LogPositionDetailsEvent.OutputTuple,
      LogPositionDetailsEvent.OutputObject
    >;
    LogPositionDetails: TypedContractEvent<
      LogPositionDetailsEvent.InputTuple,
      LogPositionDetailsEvent.OutputTuple,
      LogPositionDetailsEvent.OutputObject
    >;

    "PositionClosed(address,address,uint256,uint256)": TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;
    PositionClosed: TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;

    "PositionCreated(address,address,uint256,uint256)": TypedContractEvent<
      PositionCreatedEvent.InputTuple,
      PositionCreatedEvent.OutputTuple,
      PositionCreatedEvent.OutputObject
    >;
    PositionCreated: TypedContractEvent<
      PositionCreatedEvent.InputTuple,
      PositionCreatedEvent.OutputTuple,
      PositionCreatedEvent.OutputObject
    >;
  };
}
