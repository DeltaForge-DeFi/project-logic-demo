/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type AddressesStruct = {
  account: AddressLike;
  market: AddressLike;
  collateralToken: AddressLike;
};

export type AddressesStructOutput = [
  account: string,
  market: string,
  collateralToken: string
] & { account: string; market: string; collateralToken: string };

export type NumbersStruct = {
  sizeInUsd: BigNumberish;
  sizeInTokens: BigNumberish;
  collateralAmount: BigNumberish;
  borrowingFactor: BigNumberish;
  fundingFeeAmountPerSize: BigNumberish;
  longTokenClaimableFundingAmountPerSize: BigNumberish;
  shortTokenClaimableFundingAmountPerSize: BigNumberish;
  increasedAtTime: BigNumberish;
  decreasedAtTime: BigNumberish;
};

export type NumbersStructOutput = [
  sizeInUsd: bigint,
  sizeInTokens: bigint,
  collateralAmount: bigint,
  borrowingFactor: bigint,
  fundingFeeAmountPerSize: bigint,
  longTokenClaimableFundingAmountPerSize: bigint,
  shortTokenClaimableFundingAmountPerSize: bigint,
  increasedAtTime: bigint,
  decreasedAtTime: bigint
] & {
  sizeInUsd: bigint;
  sizeInTokens: bigint;
  collateralAmount: bigint;
  borrowingFactor: bigint;
  fundingFeeAmountPerSize: bigint;
  longTokenClaimableFundingAmountPerSize: bigint;
  shortTokenClaimableFundingAmountPerSize: bigint;
  increasedAtTime: bigint;
  decreasedAtTime: bigint;
};

export type FlagsStruct = { isLong: boolean };

export type FlagsStructOutput = [isLong: boolean] & { isLong: boolean };

export type PositionPropsStruct = {
  addresses: AddressesStruct;
  numbers: NumbersStruct;
  flags: FlagsStruct;
};

export type PositionPropsStructOutput = [
  addresses: AddressesStructOutput,
  numbers: NumbersStructOutput,
  flags: FlagsStructOutput
] & {
  addresses: AddressesStructOutput;
  numbers: NumbersStructOutput;
  flags: FlagsStructOutput;
};

export interface IReaderInterface extends Interface {
  getFunction(nameOrSignature: "getAccountPositions"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountPositions",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountPositions",
    data: BytesLike
  ): Result;
}

export interface IReader extends BaseContract {
  connect(runner?: ContractRunner | null): IReader;
  waitForDeployment(): Promise<this>;

  interface: IReaderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAccountPositions: TypedContractMethod<
    [
      dataStore: AddressLike,
      account: AddressLike,
      start: BigNumberish,
      end: BigNumberish
    ],
    [PositionPropsStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAccountPositions"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      account: AddressLike,
      start: BigNumberish,
      end: BigNumberish
    ],
    [PositionPropsStructOutput[]],
    "view"
  >;

  filters: {};
}
