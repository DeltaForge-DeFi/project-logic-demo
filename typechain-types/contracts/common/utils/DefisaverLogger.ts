/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DefisaverLoggerInterface extends Interface {
  getFunction(
    nameOrSignature: "logActionDirectEvent" | "logRecipeEvent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ActionDirectEvent" | "RecipeEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "logActionDirectEvent",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "logRecipeEvent",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "logActionDirectEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logRecipeEvent",
    data: BytesLike
  ): Result;
}

export namespace ActionDirectEventEvent {
  export type InputTuple = [
    caller: AddressLike,
    logName: string,
    data: BytesLike
  ];
  export type OutputTuple = [caller: string, logName: string, data: string];
  export interface OutputObject {
    caller: string;
    logName: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipeEventEvent {
  export type InputTuple = [caller: AddressLike, logName: string];
  export type OutputTuple = [caller: string, logName: string];
  export interface OutputObject {
    caller: string;
    logName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DefisaverLogger extends BaseContract {
  connect(runner?: ContractRunner | null): DefisaverLogger;
  waitForDeployment(): Promise<this>;

  interface: DefisaverLoggerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  logActionDirectEvent: TypedContractMethod<
    [_logName: string, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  logRecipeEvent: TypedContractMethod<[_logName: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "logActionDirectEvent"
  ): TypedContractMethod<
    [_logName: string, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "logRecipeEvent"
  ): TypedContractMethod<[_logName: string], [void], "nonpayable">;

  getEvent(
    key: "ActionDirectEvent"
  ): TypedContractEvent<
    ActionDirectEventEvent.InputTuple,
    ActionDirectEventEvent.OutputTuple,
    ActionDirectEventEvent.OutputObject
  >;
  getEvent(
    key: "RecipeEvent"
  ): TypedContractEvent<
    RecipeEventEvent.InputTuple,
    RecipeEventEvent.OutputTuple,
    RecipeEventEvent.OutputObject
  >;

  filters: {
    "ActionDirectEvent(address,string,bytes)": TypedContractEvent<
      ActionDirectEventEvent.InputTuple,
      ActionDirectEventEvent.OutputTuple,
      ActionDirectEventEvent.OutputObject
    >;
    ActionDirectEvent: TypedContractEvent<
      ActionDirectEventEvent.InputTuple,
      ActionDirectEventEvent.OutputTuple,
      ActionDirectEventEvent.OutputObject
    >;

    "RecipeEvent(address,string)": TypedContractEvent<
      RecipeEventEvent.InputTuple,
      RecipeEventEvent.OutputTuple,
      RecipeEventEvent.OutputObject
    >;
    RecipeEvent: TypedContractEvent<
      RecipeEventEvent.InputTuple,
      RecipeEventEvent.OutputTuple,
      RecipeEventEvent.OutputObject
    >;
  };
}
