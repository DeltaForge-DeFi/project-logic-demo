/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DFSRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addNewContract"
      | "adminData"
      | "approveContractChange"
      | "approveWaitPeriodChange"
      | "cancelContractChange"
      | "cancelWaitPeriodChange"
      | "entries"
      | "getAddr"
      | "isRegistered"
      | "kill"
      | "pendingAddresses"
      | "pendingWaitTimes"
      | "previousAddresses"
      | "revertToPreviousAddress"
      | "startContractChange"
      | "startWaitPeriodChange"
      | "withdrawStuckFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddNewContract"
      | "ApproveContractChange"
      | "ApproveWaitPeriodChange"
      | "CancelContractChange"
      | "CancelWaitPeriodChange"
      | "RevertToPreviousAddress"
      | "StartContractChange"
      | "StartWaitPeriodChange"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addNewContract",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "adminData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveContractChange",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWaitPeriodChange",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelContractChange",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWaitPeriodChange",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "entries", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getAddr", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWaitTimes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "previousAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revertToPreviousAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startContractChange",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startWaitPeriodChange",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStuckFunds",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adminData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveContractChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWaitPeriodChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelContractChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWaitPeriodChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWaitTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertToPreviousAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startContractChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startWaitPeriodChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStuckFunds",
    data: BytesLike
  ): Result;
}

export namespace AddNewContractEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BytesLike,
    arg2: AddressLike,
    arg3: BigNumberish
  ];
  export type OutputTuple = [
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: bigint
  ];
  export interface OutputObject {
    arg0: string;
    arg1: string;
    arg2: string;
    arg3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApproveContractChangeEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BytesLike,
    arg2: AddressLike,
    arg3: AddressLike
  ];
  export type OutputTuple = [
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string
  ];
  export interface OutputObject {
    arg0: string;
    arg1: string;
    arg2: string;
    arg3: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApproveWaitPeriodChangeEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BytesLike,
    arg2: BigNumberish,
    arg3: BigNumberish
  ];
  export type OutputTuple = [
    arg0: string,
    arg1: string,
    arg2: bigint,
    arg3: bigint
  ];
  export interface OutputObject {
    arg0: string;
    arg1: string;
    arg2: bigint;
    arg3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelContractChangeEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BytesLike,
    arg2: AddressLike,
    arg3: AddressLike
  ];
  export type OutputTuple = [
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string
  ];
  export interface OutputObject {
    arg0: string;
    arg1: string;
    arg2: string;
    arg3: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelWaitPeriodChangeEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BytesLike,
    arg2: BigNumberish,
    arg3: BigNumberish
  ];
  export type OutputTuple = [
    arg0: string,
    arg1: string,
    arg2: bigint,
    arg3: bigint
  ];
  export interface OutputObject {
    arg0: string;
    arg1: string;
    arg2: bigint;
    arg3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevertToPreviousAddressEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BytesLike,
    arg2: AddressLike,
    arg3: AddressLike
  ];
  export type OutputTuple = [
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string
  ];
  export interface OutputObject {
    arg0: string;
    arg1: string;
    arg2: string;
    arg3: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartContractChangeEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BytesLike,
    arg2: AddressLike,
    arg3: AddressLike
  ];
  export type OutputTuple = [
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string
  ];
  export interface OutputObject {
    arg0: string;
    arg1: string;
    arg2: string;
    arg3: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartWaitPeriodChangeEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BytesLike,
    arg2: BigNumberish
  ];
  export type OutputTuple = [arg0: string, arg1: string, arg2: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: string;
    arg2: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DFSRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DFSRegistry;
  waitForDeployment(): Promise<this>;

  interface: DFSRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addNewContract: TypedContractMethod<
    [_id: BytesLike, _contractAddr: AddressLike, _waitPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  adminData: TypedContractMethod<[], [string], "view">;

  approveContractChange: TypedContractMethod<
    [_id: BytesLike],
    [void],
    "nonpayable"
  >;

  approveWaitPeriodChange: TypedContractMethod<
    [_id: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelContractChange: TypedContractMethod<
    [_id: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelWaitPeriodChange: TypedContractMethod<
    [_id: BytesLike],
    [void],
    "nonpayable"
  >;

  entries: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean, boolean, boolean] & {
        contractAddr: string;
        waitPeriod: bigint;
        changeStartTime: bigint;
        inContractChange: boolean;
        inWaitPeriodChange: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;

  getAddr: TypedContractMethod<[_id: BytesLike], [string], "view">;

  isRegistered: TypedContractMethod<[_id: BytesLike], [boolean], "view">;

  kill: TypedContractMethod<[], [void], "nonpayable">;

  pendingAddresses: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  pendingWaitTimes: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  previousAddresses: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  revertToPreviousAddress: TypedContractMethod<
    [_id: BytesLike],
    [void],
    "nonpayable"
  >;

  startContractChange: TypedContractMethod<
    [_id: BytesLike, _newContractAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  startWaitPeriodChange: TypedContractMethod<
    [_id: BytesLike, _newWaitPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawStuckFunds: TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addNewContract"
  ): TypedContractMethod<
    [_id: BytesLike, _contractAddr: AddressLike, _waitPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveContractChange"
  ): TypedContractMethod<[_id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveWaitPeriodChange"
  ): TypedContractMethod<[_id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelContractChange"
  ): TypedContractMethod<[_id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelWaitPeriodChange"
  ): TypedContractMethod<[_id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "entries"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean, boolean, boolean] & {
        contractAddr: string;
        waitPeriod: bigint;
        changeStartTime: bigint;
        inContractChange: boolean;
        inWaitPeriodChange: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAddr"
  ): TypedContractMethod<[_id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[_id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "kill"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingAddresses"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "pendingWaitTimes"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "previousAddresses"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "revertToPreviousAddress"
  ): TypedContractMethod<[_id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startContractChange"
  ): TypedContractMethod<
    [_id: BytesLike, _newContractAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startWaitPeriodChange"
  ): TypedContractMethod<
    [_id: BytesLike, _newWaitPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawStuckFunds"
  ): TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddNewContract"
  ): TypedContractEvent<
    AddNewContractEvent.InputTuple,
    AddNewContractEvent.OutputTuple,
    AddNewContractEvent.OutputObject
  >;
  getEvent(
    key: "ApproveContractChange"
  ): TypedContractEvent<
    ApproveContractChangeEvent.InputTuple,
    ApproveContractChangeEvent.OutputTuple,
    ApproveContractChangeEvent.OutputObject
  >;
  getEvent(
    key: "ApproveWaitPeriodChange"
  ): TypedContractEvent<
    ApproveWaitPeriodChangeEvent.InputTuple,
    ApproveWaitPeriodChangeEvent.OutputTuple,
    ApproveWaitPeriodChangeEvent.OutputObject
  >;
  getEvent(
    key: "CancelContractChange"
  ): TypedContractEvent<
    CancelContractChangeEvent.InputTuple,
    CancelContractChangeEvent.OutputTuple,
    CancelContractChangeEvent.OutputObject
  >;
  getEvent(
    key: "CancelWaitPeriodChange"
  ): TypedContractEvent<
    CancelWaitPeriodChangeEvent.InputTuple,
    CancelWaitPeriodChangeEvent.OutputTuple,
    CancelWaitPeriodChangeEvent.OutputObject
  >;
  getEvent(
    key: "RevertToPreviousAddress"
  ): TypedContractEvent<
    RevertToPreviousAddressEvent.InputTuple,
    RevertToPreviousAddressEvent.OutputTuple,
    RevertToPreviousAddressEvent.OutputObject
  >;
  getEvent(
    key: "StartContractChange"
  ): TypedContractEvent<
    StartContractChangeEvent.InputTuple,
    StartContractChangeEvent.OutputTuple,
    StartContractChangeEvent.OutputObject
  >;
  getEvent(
    key: "StartWaitPeriodChange"
  ): TypedContractEvent<
    StartWaitPeriodChangeEvent.InputTuple,
    StartWaitPeriodChangeEvent.OutputTuple,
    StartWaitPeriodChangeEvent.OutputObject
  >;

  filters: {
    "AddNewContract(address,bytes4,address,uint256)": TypedContractEvent<
      AddNewContractEvent.InputTuple,
      AddNewContractEvent.OutputTuple,
      AddNewContractEvent.OutputObject
    >;
    AddNewContract: TypedContractEvent<
      AddNewContractEvent.InputTuple,
      AddNewContractEvent.OutputTuple,
      AddNewContractEvent.OutputObject
    >;

    "ApproveContractChange(address,bytes4,address,address)": TypedContractEvent<
      ApproveContractChangeEvent.InputTuple,
      ApproveContractChangeEvent.OutputTuple,
      ApproveContractChangeEvent.OutputObject
    >;
    ApproveContractChange: TypedContractEvent<
      ApproveContractChangeEvent.InputTuple,
      ApproveContractChangeEvent.OutputTuple,
      ApproveContractChangeEvent.OutputObject
    >;

    "ApproveWaitPeriodChange(address,bytes4,uint256,uint256)": TypedContractEvent<
      ApproveWaitPeriodChangeEvent.InputTuple,
      ApproveWaitPeriodChangeEvent.OutputTuple,
      ApproveWaitPeriodChangeEvent.OutputObject
    >;
    ApproveWaitPeriodChange: TypedContractEvent<
      ApproveWaitPeriodChangeEvent.InputTuple,
      ApproveWaitPeriodChangeEvent.OutputTuple,
      ApproveWaitPeriodChangeEvent.OutputObject
    >;

    "CancelContractChange(address,bytes4,address,address)": TypedContractEvent<
      CancelContractChangeEvent.InputTuple,
      CancelContractChangeEvent.OutputTuple,
      CancelContractChangeEvent.OutputObject
    >;
    CancelContractChange: TypedContractEvent<
      CancelContractChangeEvent.InputTuple,
      CancelContractChangeEvent.OutputTuple,
      CancelContractChangeEvent.OutputObject
    >;

    "CancelWaitPeriodChange(address,bytes4,uint256,uint256)": TypedContractEvent<
      CancelWaitPeriodChangeEvent.InputTuple,
      CancelWaitPeriodChangeEvent.OutputTuple,
      CancelWaitPeriodChangeEvent.OutputObject
    >;
    CancelWaitPeriodChange: TypedContractEvent<
      CancelWaitPeriodChangeEvent.InputTuple,
      CancelWaitPeriodChangeEvent.OutputTuple,
      CancelWaitPeriodChangeEvent.OutputObject
    >;

    "RevertToPreviousAddress(address,bytes4,address,address)": TypedContractEvent<
      RevertToPreviousAddressEvent.InputTuple,
      RevertToPreviousAddressEvent.OutputTuple,
      RevertToPreviousAddressEvent.OutputObject
    >;
    RevertToPreviousAddress: TypedContractEvent<
      RevertToPreviousAddressEvent.InputTuple,
      RevertToPreviousAddressEvent.OutputTuple,
      RevertToPreviousAddressEvent.OutputObject
    >;

    "StartContractChange(address,bytes4,address,address)": TypedContractEvent<
      StartContractChangeEvent.InputTuple,
      StartContractChangeEvent.OutputTuple,
      StartContractChangeEvent.OutputObject
    >;
    StartContractChange: TypedContractEvent<
      StartContractChangeEvent.InputTuple,
      StartContractChangeEvent.OutputTuple,
      StartContractChangeEvent.OutputObject
    >;

    "StartWaitPeriodChange(address,bytes4,uint256)": TypedContractEvent<
      StartWaitPeriodChangeEvent.InputTuple,
      StartWaitPeriodChangeEvent.OutputTuple,
      StartWaitPeriodChangeEvent.OutputObject
    >;
    StartWaitPeriodChange: TypedContractEvent<
      StartWaitPeriodChangeEvent.InputTuple,
      StartWaitPeriodChangeEvent.OutputTuple,
      StartWaitPeriodChangeEvent.OutputObject
    >;
  };
}
