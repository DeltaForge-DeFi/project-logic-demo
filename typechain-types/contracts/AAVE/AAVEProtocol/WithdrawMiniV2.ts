/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface WithdrawMiniV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "AAVE_REFERRAL_CODE"
      | "getUserDebt"
      | "owner"
      | "recoverERC20"
      | "repayDebt"
      | "withdrawERC20"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RepayDebt" | "Withdraw"): EventFragment;

  encodeFunctionData(
    functionFragment: "AAVE_REFERRAL_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDebt",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "AAVE_REFERRAL_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
}

export namespace RepayDebtEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    interestRateMode: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    interestRateMode: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    interestRateMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WithdrawMiniV2 extends BaseContract {
  connect(runner?: ContractRunner | null): WithdrawMiniV2;
  waitForDeployment(): Promise<this>;

  interface: WithdrawMiniV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AAVE_REFERRAL_CODE: TypedContractMethod<[], [bigint], "view">;

  getUserDebt: TypedContractMethod<
    [_market: AddressLike, _token: AddressLike, _user: AddressLike],
    [[bigint, bigint] & { stableDebt: bigint; variableDebt: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recoverERC20: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  repayDebt: TypedContractMethod<
    [
      _market: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawERC20: TypedContractMethod<
    [
      _market: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _to: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AAVE_REFERRAL_CODE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserDebt"
  ): TypedContractMethod<
    [_market: AddressLike, _token: AddressLike, _user: AddressLike],
    [[bigint, bigint] & { stableDebt: bigint; variableDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayDebt"
  ): TypedContractMethod<
    [
      _market: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawERC20"
  ): TypedContractMethod<
    [
      _market: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _to: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RepayDebt"
  ): TypedContractEvent<
    RepayDebtEvent.InputTuple,
    RepayDebtEvent.OutputTuple,
    RepayDebtEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "RepayDebt(address,uint256,uint256)": TypedContractEvent<
      RepayDebtEvent.InputTuple,
      RepayDebtEvent.OutputTuple,
      RepayDebtEvent.OutputObject
    >;
    RepayDebt: TypedContractEvent<
      RepayDebtEvent.InputTuple,
      RepayDebtEvent.OutputTuple,
      RepayDebtEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
