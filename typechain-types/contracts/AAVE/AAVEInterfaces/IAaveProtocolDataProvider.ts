/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IAaveProtocolDataProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPaused"
      | "getReserveConfigurationData"
      | "getReserveData"
      | "getSiloedBorrowing"
      | "getUserReserveData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveConfigurationData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSiloedBorrowing",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReserveData",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserveConfigurationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSiloedBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserveData",
    data: BytesLike
  ): Result;
}

export interface IAaveProtocolDataProvider extends BaseContract {
  connect(runner?: ContractRunner | null): IAaveProtocolDataProvider;
  waitForDeployment(): Promise<this>;

  interface: IAaveProtocolDataProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPaused: TypedContractMethod<[asset: AddressLike], [boolean], "view">;

  getReserveConfigurationData: TypedContractMethod<
    [asset: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        decimals: bigint;
        ltv: bigint;
        liquidationThreshold: bigint;
        liquidationBonus: bigint;
        reserveFactor: bigint;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        isActive: boolean;
        isFrozen: boolean;
      }
    ],
    "view"
  >;

  getReserveData: TypedContractMethod<
    [asset: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        unbacked: bigint;
        accruedToTreasuryScaled: bigint;
        totalAToken: bigint;
        totalStableDebt: bigint;
        totalVariableDebt: bigint;
        liquidityRate: bigint;
        variableBorrowRate: bigint;
        stableBorrowRate: bigint;
        averageStableBorrowRate: bigint;
        liquidityIndex: bigint;
        variableBorrowIndex: bigint;
        lastUpdateTimestamp: bigint;
      }
    ],
    "view"
  >;

  getSiloedBorrowing: TypedContractMethod<
    [asset: AddressLike],
    [boolean],
    "view"
  >;

  getUserReserveData: TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        currentATokenBalance: bigint;
        currentStableDebt: bigint;
        currentVariableDebt: bigint;
        principalStableDebt: bigint;
        scaledVariableDebt: bigint;
        stableBorrowRate: bigint;
        liquidityRate: bigint;
        stableRateLastUpdated: bigint;
        usageAsCollateralEnabled: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPaused"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getReserveConfigurationData"
  ): TypedContractMethod<
    [asset: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        decimals: bigint;
        ltv: bigint;
        liquidationThreshold: bigint;
        liquidationBonus: bigint;
        reserveFactor: bigint;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        isActive: boolean;
        isFrozen: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserveData"
  ): TypedContractMethod<
    [asset: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        unbacked: bigint;
        accruedToTreasuryScaled: bigint;
        totalAToken: bigint;
        totalStableDebt: bigint;
        totalVariableDebt: bigint;
        liquidityRate: bigint;
        variableBorrowRate: bigint;
        stableBorrowRate: bigint;
        averageStableBorrowRate: bigint;
        liquidityIndex: bigint;
        variableBorrowIndex: bigint;
        lastUpdateTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSiloedBorrowing"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getUserReserveData"
  ): TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        currentATokenBalance: bigint;
        currentStableDebt: bigint;
        currentVariableDebt: bigint;
        principalStableDebt: bigint;
        scaledVariableDebt: bigint;
        stableBorrowRate: bigint;
        liquidityRate: bigint;
        stableRateLastUpdated: bigint;
        usageAsCollateralEnabled: boolean;
      }
    ],
    "view"
  >;

  filters: {};
}
